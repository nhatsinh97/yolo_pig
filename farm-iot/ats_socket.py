# ats_socket.py
import json
import paho.mqtt.client as mqtt
from threading import Thread
from application.controllers.ats_logger import log_ats_data


# Kh·ªüi t·∫°o bi·∫øn socketio, s·∫Ω ƒë∆∞·ª£c truy·ªÅn t·ª´ file ch√≠nh (app.py)
socketio = None

# C·∫•u h√¨nh MQTT
MQTT_BROKER = "localhost"  # ho·∫∑c IP nh∆∞ "10.50.41.15"
MQTT_PORT = 1883
MQTT_TOPIC = "ats/data"

# H√†m callback khi nh·∫≠n d·ªØ li·ªáu t·ª´ MQTT
def on_message(client, userdata, msg):
    try:
        payload = msg.payload.decode('utf-8')
        data = json.loads(payload)
        print("[ATS MQTT] D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data)

        # üî¥ Ghi d·ªØ li·ªáu v√†o InfluxDB
        log_ats_data(data)

        # G·ª≠i d·ªØ li·ªáu ƒë·∫øn client qua Socket.IO
        if socketio:
            socketio.emit('ats_data', data)

    except Exception as e:
        print("[ATS MQTT] L·ªói:", e)


def start_ats_socketio_listener(socketio_instance):
    global socketio, mqtt_client
    socketio = socketio_instance

    mqtt_client = mqtt.Client()
    mqtt_client.on_message = on_message
    mqtt_client.connect(MQTT_BROKER, MQTT_PORT)
    mqtt_client.subscribe(MQTT_TOPIC)

    thread = Thread(target=mqtt_client.loop_forever)
    thread.daemon = True
    thread.start()
